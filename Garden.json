import SwiftUI

struct GardenGameView: View {
    @State private var plantCount = 0
    @State private var money = 0
    @State private var seedPrice = 1
    @State private var fencePrice = 5
    @State private var message = ""
    
    @State private var fences: [CGRect] = []
    private let maxFences = 10
    
    var body: some View {
        VStack {
            ZStack {
                Rectangle()
                    .fill(Color.blue.opacity(0.2))
                    .frame(width: 300, height: 200)
                    .border(Color.green, width: 2)
                    .overlay(OverlayFences())
                
                ForEach(0..<plantCount, id: \.self) { _ in
                    Image(systemName: "leaf")
                        .resizable()
                        .frame(width: 30, height: 30)
                        .position(randomPosition())
                }
            }
            .padding()

            Text(message)
                .padding()

            Text("Seeds Planted: \(plantCount)")
            Text("Money: $\(money)")
            Text("Seed Price: $\(seedPrice)")
            Text("Fence Price: $\(fencePrice)")

            Button("Plant a Seed") {
                plantCount += 1
                message = "You planted a seed!"
            }
            .padding()

            Button("Buy Better Seeds ($\(seedPrice))") {
                if money >= seedPrice {
                    money -= seedPrice
                    seedPrice += 1
                    message = "You bought better seeds!"
                } else {
                    message = "Not enough money to buy seeds."
                }
            }
            .padding()

            Button("Sell Seeds") {
                if plantCount > 0 {
                    let sellPrice = max(1, seedPrice / 2)
                    money += sellPrice * plantCount
                    message = "You sold all \(plantCount) seeds for $\(sellPrice * plantCount)!"
                    plantCount = 0
                } else {
                    message = "No seeds to sell."
                }
            }
            .padding()

            Button("Buy Wooden Fence ($\(fencePrice))") {
                if money >= fencePrice && fences.count < maxFences {
                    let newFence = randomFencePosition()
                    money -= fencePrice
                    fences.append(newFence)
                    message = "You bought a wooden fence!"
                } else {
                    message = "Not enough money or fence limit reached."
                }
            }
            .padding()
        }
        .onAppear(perform: startAttacks)
    }

    private func randomPosition() -> CGPoint {
        CGPoint(x: CGFloat.random(in: 0...300), y: CGFloat.random(in: 150...200))
    }

    private func randomFencePosition() -> CGRect {
        CGRect(x: CGFloat.random(in: 0...270), y: 170, width: 30, height: 20)
    }

    private func OverlayFences() -> some View {
        ForEach(fences, id: \.self) { fence in
            Rectangle()
                .fill(Color.brown)
                .frame(width: 30, height: 20)
                .position(x: fence.midX, y: fence.midY)
        }
    }

    private func startAttacks() {
        // Simulate attacks on the garden
        DispatchQueue.main.asyncAfter(deadline: .now() + 20) {
            attackGarden(isPoisonEnemy: false)
        }
        DispatchQueue.main.asyncAfter(deadline: .now() + 40) {
            attackGarden(isPoisonEnemy: true)
        }
    }

    private func attackGarden(isPoisonEnemy: Bool) {
        // Implement enemy attack logic
        if isPoisonEnemy {
            wipeOutCrops()
        } else {
            stealMoney()
        }
    }

    private func wipeOutCrops() {
        plantCount = 0
        message = "The poison enemy wiped out all your crops!"
    }

    private func stealMoney() {
        let stolenAmount = Int(Double(money) * 0.3)
        money -= stolenAmount
        message = "The enemy stole $\(stolenAmount)!"
    }
}

struct ContentView: View {
    var body: some View {
        GardenGameView()
    }
}

@main
struct GardenGameApp: App {
    var body: some Scene {
        WindowGroup {
            ContentView()
        }
    }
}
